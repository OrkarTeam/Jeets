
const apiUrl = (tokenAddress) => `https://api.solanatracker.io/tokens/${tokenAddress}`;
const jupApiUrl = 'https://price.jup.ag/v4/price?ids=So11111111111111111111111111111111111111112';

// Function to fetch the SOL price from Jup.ag API
async function fetchSolPrice() {
  try {
    const response = await fetch(jupApiUrl);
    const data = await response.json();
    return data.data.So11111111111111111111111111111111111111112.price;
  } catch (error) {
    console.error('Error fetching SOL price:', error);
    return null;
  }
}

// Function to format large numbers with commas and abbreviations
function formatNumber(number) {
  const roundedNumber = Math.ceil(number * 1000) / 1000;

  if (roundedNumber >= 1e9) {
    return (roundedNumber / 1e9).toFixed(2) + 'B';
  } else if (roundedNumber >= 1e6) {
    return (roundedNumber / 1e6).toFixed(2) + 'M';
  } else if (roundedNumber >= 1e3) {
    return (roundedNumber / 1e3).toFixed(2) + 'K';
  } else {
    return roundedNumber.toFixed(3);
  }
}

// Function to fetch data from the API and update the HTML elements
async function fetchData(tokenAddress) {
  try {
    const response = await fetch(apiUrl(tokenAddress));
    const data = await response.json();

    // Fetch the current SOL price
    const solPrice = await fetchSolPrice();

    // Update the token name
    document.getElementById('tokenName').textContent = data.name;

    // Update the token symbol
    document.getElementById('tokenSymbol').textContent = data.symbol;

    // Update the token description
    const tokenDescription = data.description || 'No description available';
    document.getElementById('tokenDescription').textContent = tokenDescription;

    // Update the token image
    document.getElementById('tokenImage').src = data.image;

    // Update the mint address
    document.getElementById('mintAddress').textContent = data.mint;

    // Update the token price in USD
    if (data.price && solPrice) {
      const priceInUsd = data.price * solPrice;
      document.querySelector('.Price').textContent = '$' + priceInUsd.toFixed(8);
    } else {
      document.querySelector('.Price').textContent = 'N/A';
    }

    // Update the price change percentage (assuming 24h price change)
    const priceChangePercentage = data.stats && data.stats['24h'] && data.stats['24h'].priceChangePercent
    ? data.stats['24h'].priceChangePercent.toFixed(2)
    : null;

  const priceChangeElement = document.getElementById('priceChangePercentage');

  if (priceChangePercentage !== null) {
    priceChangeElement.textContent = priceChangePercentage + '%';

    if (priceChangePercentage < 0) {
      priceChangeElement.classList.add('negative');
    } else {
      priceChangeElement.classList.remove('negative');
    }
  } else {
    priceChangeElement.textContent = 'N/A';
    priceChangeElement.classList.remove('negative');
  }


  
    // Update the social media links
    const socialMediaLinks = {
      twitter: data.info.twitter || '',
      telegram: data.info.telegram || '',
      discord: data.info.discord || '',
      website: data.info.website || ''
    };

    // Function to create a social media button
    function createSocialMediaButton(platform, link, svgCode) {
      const buttonElement = document.createElement('a');
      buttonElement.href = link;
      buttonElement.target = '_blank';

      const buttonContent = document.createElement('button');
      buttonContent.className = platform;
      buttonContent.innerHTML = svgCode;

      buttonElement.appendChild(buttonContent);
      return buttonElement;
    }

    // Get the container element for social media buttons
    const socialMediaContainer = document.querySelector('.Media');

    // Clear existing social media buttons
    socialMediaContainer.innerHTML = '';

    // Create and append social media buttons based on available links
    for (const [platform, link] of Object.entries(socialMediaLinks)) {
      if (link) {
        let svgCode = '';

        if (platform === 'twitter') {
          svgCode = '<svg width="20.25" height="18.75" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M20.1921 3.73233C20.1353 3.58956 20.0392 3.46753 19.9159 3.38166C19.7926 3.29579 19.6476 3.24994 19.4993 3.24991H16.6465C16.2476 2.54305 15.6799 1.95572 14.9987 1.54503C14.3174 1.13433 13.5457 0.914243 12.7586 0.906156C12.1723 0.898144 11.5902 1.01238 11.0469 1.24214C10.5035 1.47191 10.0097 1.81255 9.59458 2.24405C9.16733 2.68079 8.82823 3.2021 8.59719 3.77733C8.36616 4.35257 8.24787 4.97011 8.24927 5.59366V6.18838C4.47489 5.15127 1.3877 1.95303 1.35489 1.91885C1.25427 1.81311 1.12674 1.73952 0.987315 1.70675C0.84789 1.67398 0.702378 1.68339 0.567915 1.73387C0.433453 1.78436 0.315639 1.87381 0.228347 1.99171C0.141056 2.1096 0.087923 2.25102 0.0752046 2.39932C-0.328858 7.06631 0.972392 10.1894 2.1377 11.9872C2.7059 12.876 3.39713 13.6723 4.18895 14.3505C2.76114 16.0624 0.513017 16.9618 0.488642 16.9716C0.382811 17.0129 0.287306 17.0785 0.209263 17.1637C0.13122 17.2488 0.0726568 17.3512 0.0379491 17.4633C0.00324146 17.5753 -0.006713 17.694 0.00882926 17.8106C0.0243715 17.9272 0.0650086 18.0387 0.127704 18.1366C0.198017 18.246 0.479267 18.6298 1.16645 18.9882C2.01583 19.4315 3.13802 19.6562 4.49927 19.6562C11.1246 19.6562 16.6605 14.3417 17.2258 7.50381L20.0299 4.58389C20.1347 4.47457 20.2061 4.33532 20.235 4.18374C20.2639 4.03216 20.2489 3.87506 20.1921 3.73233ZM15.9733 6.6044C15.8447 6.73867 15.7674 6.91708 15.7558 7.10635C15.3743 13.2675 10.4318 18.0937 4.49927 18.0937C3.50927 18.0937 2.81177 17.9569 2.32239 17.7929C3.40145 17.1825 4.90614 16.1327 5.87364 14.621C5.93043 14.5321 5.96912 14.432 5.98732 14.327C6.00553 14.2219 6.00287 14.114 5.9795 14.0101C5.95613 13.9061 5.91255 13.8083 5.85145 13.7225C5.79035 13.6368 5.71303 13.565 5.62427 13.5116C5.5802 13.4853 1.5077 10.9394 1.49927 4.13662C2.99927 5.40616 5.74145 7.37588 8.87458 7.92471C8.98196 7.94357 9.09199 7.93784 9.19703 7.90793C9.30208 7.87802 9.39961 7.82464 9.48284 7.7515C9.56608 7.67837 9.63303 7.58723 9.67904 7.48441C9.72505 7.3816 9.74901 7.26959 9.74927 7.15616V5.59366C9.74842 5.17691 9.82761 4.76419 9.98218 4.3798C10.1367 3.99541 10.3636 3.6471 10.6493 3.35537C10.9232 3.06953 11.2493 2.84379 11.6084 2.69148C11.9675 2.53918 12.3522 2.46341 12.7399 2.46866C13.9268 2.48428 15.0358 3.23819 15.4999 4.34463C15.5584 4.48374 15.6545 4.60207 15.7766 4.68515C15.8986 4.76823 16.0413 4.81245 16.1871 4.81241H17.6871L15.9733 6.6044Z" fill="#c0c0c0"/></svg>';
        } else if (platform === 'telegram') {
          svgCode = '<svg width="20" height="17" viewBox="0 0 20 17" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M17.9842 0.350129C17.9842 0.350129 19.7648 -0.344246 19.6158 1.34196C19.5668 2.03634 19.1218 4.46688 18.7753 7.09542L17.5882 14.8825C17.5882 14.8825 17.4892 16.0233 16.5986 16.2218C15.7086 16.4198 14.373 15.5274 14.1255 15.3289C13.9275 15.18 10.4157 12.9479 9.17914 11.857C8.83264 11.5591 8.43664 10.9642 9.22864 10.2698L14.4225 5.30975C15.016 4.71392 15.6096 3.32517 13.1364 5.01184L6.21097 9.7235C6.21097 9.7235 5.41943 10.2199 3.9358 9.77346L0.720138 8.78117C0.720138 8.78117 -0.466946 8.0373 1.56118 7.29342C6.50797 4.96234 12.5923 2.58175 17.9837 0.349671" fill="#c0c0c0" /></svg>';
        } else if (platform === 'discord') {
          svgCode = '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.74997 13.1252C9.74997 13.3477 9.68399 13.5652 9.56037 13.7502C9.43676 13.9352 9.26105 14.0794 9.05549 14.1646C8.84992 14.2497 8.62372 14.272 8.40549 14.2286C8.18726 14.1852 7.98681 14.0781 7.82947 13.9207C7.67214 13.7634 7.56499 13.5629 7.52159 13.3447C7.47818 13.1265 7.50046 12.9003 7.5856 12.6947C7.67075 12.4891 7.81495 12.3134 7.99995 12.1898C8.18496 12.0662 8.40246 12.0002 8.62497 12.0002C8.92334 12.0002 9.20949 12.1188 9.42046 12.3297C9.63144 12.5407 9.74997 12.8269 9.74997 13.1252ZM15.375 12.0002C15.1525 12.0002 14.935 12.0662 14.75 12.1898C14.5649 12.3134 14.4208 12.4891 14.3356 12.6947C14.2505 12.9003 14.2282 13.1265 14.2716 13.3447C14.315 13.5629 14.4221 13.7634 14.5795 13.9207C14.7368 14.0781 14.9373 14.1852 15.1555 14.2286C15.3737 14.272 15.5999 14.2497 15.8055 14.1646C16.0111 14.0794 16.1868 13.9352 16.3104 13.7502C16.434 13.5652 16.5 13.3477 16.5 13.1252C16.5 12.8269 16.3814 12.5407 16.1705 12.3297C15.9595 12.1188 15.6733 12.0002 15.375 12.0002ZM22.3547 18.0846L16.0734 20.8699C15.8845 20.9539 15.6805 20.9983 15.4738 21.0005C15.2671 21.0028 15.0622 20.9627 14.8716 20.8828C14.6809 20.8029 14.5087 20.6848 14.3653 20.5359C14.222 20.387 14.1106 20.2103 14.0381 20.0168L13.2778 17.9543C12.8578 17.9824 12.4318 17.9968 12 17.9974C11.5681 17.998 11.1422 17.9837 10.7222 17.9543L9.96184 20.0168C9.88918 20.2102 9.77776 20.3868 9.63441 20.5357C9.49106 20.6845 9.3188 20.8025 9.12821 20.8824C8.93763 20.9623 8.73273 21.0024 8.52608 21.0002C8.31944 20.9981 8.11542 20.9537 7.92653 20.8699L1.64528 18.0846C1.32108 17.9429 1.05774 17.6906 0.902185 17.3728C0.74663 17.055 0.708967 16.6923 0.795907 16.3493L3.56247 5.43772C3.63548 5.15395 3.78966 4.89763 4.00613 4.70014C4.2226 4.50266 4.49195 4.37258 4.78122 4.32585L8.16184 3.76991C8.53452 3.70997 8.91618 3.79078 9.23258 3.99663C9.54898 4.20248 9.77751 4.51866 9.87372 4.88366L10.1793 6.08741C10.775 6.02929 11.3818 6.00022 12 6.00022C12.6181 6.00022 13.2243 6.02929 13.8187 6.08741L14.1243 4.88366C14.2204 4.51855 14.4489 4.20224 14.7653 3.99636C15.0818 3.79047 15.4635 3.70975 15.8362 3.76991L19.2187 4.32585C19.508 4.37258 19.7773 4.50266 19.9938 4.70014C20.2103 4.89763 20.3645 5.15395 20.4375 5.43772L23.2059 16.3483C23.293 16.6917 23.2552 17.0548 23.0992 17.3728C22.9433 17.6909 22.6794 17.9432 22.3547 18.0846ZM21.75 16.714L18.9815 5.81272H18.974L15.5934 5.25022C15.591 5.24882 15.5882 5.24809 15.5854 5.24809C15.5826 5.24809 15.5799 5.24882 15.5775 5.25022L15.3122 6.2946C15.7809 6.38272 16.2497 6.48772 16.7025 6.61522C16.881 6.66073 17.0365 6.77035 17.1394 6.92318C17.2423 7.07602 17.2853 7.26137 17.2603 7.44389C17.2352 7.62641 17.1439 7.79333 17.0037 7.91283C16.8634 8.03232 16.6842 8.09602 16.5 8.09179C16.4315 8.09159 16.3634 8.08213 16.2975 8.06366C14.8968 7.68359 13.4513 7.49407 12 7.50022C10.5487 7.49376 9.10318 7.68296 7.70247 8.06272C7.60678 8.09231 7.50614 8.10242 7.40648 8.09248C7.30682 8.08253 7.21017 8.05273 7.12221 8.00483C7.03426 7.95692 6.95679 7.89188 6.89438 7.81355C6.83196 7.73522 6.78587 7.64519 6.75882 7.54875C6.73177 7.45232 6.72431 7.35145 6.73687 7.25209C6.74944 7.15272 6.78178 7.05689 6.83199 6.97022C6.88219 6.88356 6.94925 6.80783 7.02919 6.74751C7.10914 6.68718 7.20036 6.64348 7.29747 6.61897C7.74934 6.49147 8.21434 6.38647 8.68684 6.29835L8.42153 5.25022H8.41028L5.02591 5.80616C5.02315 5.8054 5.02023 5.8054 5.01747 5.80616L2.24997 16.7187L8.53122 19.5002C8.53438 19.5019 8.53793 19.5029 8.54153 19.5028C8.54513 19.5029 8.54868 19.5019 8.55184 19.5002L9.18747 17.7865C8.55062 17.6891 7.92013 17.5538 7.29934 17.3815C7.11444 17.3224 6.95965 17.1939 6.86751 17.0231C6.77536 16.8522 6.75304 16.6523 6.80525 16.4654C6.85745 16.2784 6.98011 16.119 7.14743 16.0206C7.31475 15.9222 7.51371 15.8925 7.70247 15.9377C9.1031 16.3179 10.5487 16.5071 12 16.5002C13.4513 16.5071 14.8968 16.3179 16.2975 15.9377C16.489 15.884 16.6941 15.9086 16.8676 16.0061C17.041 16.1036 17.1686 16.266 17.2223 16.4576C17.276 16.6491 17.2514 16.8542 17.1539 17.0277C17.0564 17.2011 16.894 17.3287 16.7025 17.3824C16.0811 17.5545 15.4499 17.6894 14.8125 17.7865L15.4453 19.5002C15.4483 19.5019 15.4517 19.5027 15.4551 19.5027C15.4586 19.5027 15.4619 19.5019 15.465 19.5002L21.75 16.714Z" fill="#c0c0c0"/></svg>';
        } else if (platform === 'website') {
          svgCode = '<svg width="19.17" height="19.17" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.6796 12.4165C14.7563 11.784 14.8138 11.1515 14.8138 10.4998C14.8138 9.84817 14.7563 9.21567 14.6796 8.58317H17.9188C18.0721 9.1965 18.168 9.83859 18.168 10.4998C18.168 11.1611 18.0721 11.8032 17.9188 12.4165M12.9834 17.7448C13.5584 16.6811 13.9992 15.5311 14.3059 14.3332H17.133C16.2045 15.9319 14.7315 17.143 12.9834 17.7448ZM12.7438 12.4165H8.2588C8.16297 11.784 8.10547 11.1515 8.10547 10.4998C8.10547 9.84817 8.16297 9.20609 8.2588 8.58317H12.7438C12.8301 9.20609 12.8971 9.84817 12.8971 10.4998C12.8971 11.1515 12.8301 11.784 12.7438 12.4165ZM10.5013 18.1282C9.70588 16.9782 9.0638 15.7036 8.67089 14.3332H12.3317C11.9388 15.7036 11.2967 16.9782 10.5013 18.1282ZM6.66797 6.6665H3.86964C4.78854 5.06342 6.26048 3.85043 8.00963 3.25484C7.43463 4.31859 7.00339 5.46859 6.66797 6.6665ZM3.86964 14.3332H6.66797C7.00339 15.5311 7.43463 16.6811 8.00963 17.7448C6.26415 17.1427 4.79428 15.9314 3.86964 14.3332ZM3.0838 12.4165C2.93047 11.8032 2.83464 11.1611 2.83464 10.4998C2.83464 9.83859 2.93047 9.1965 3.0838 8.58317H6.32297C6.2463 9.21567 6.1888 9.84817 6.1888 10.4998C6.1888 11.1515 6.2463 11.784 6.32297 12.4165M10.5013 2.86192C11.2967 4.01192 11.9388 5.29609 12.3317 6.6665H8.67089C9.0638 5.29609 9.70588 4.01192 10.5013 2.86192ZM17.133 6.6665H14.3059C14.0059 5.47957 13.5618 4.33382 12.9834 3.25484C14.7467 3.85859 16.213 5.07567 17.133 6.6665ZM10.5013 0.916504C5.20172 0.916504 0.917969 5.229 0.917969 10.4998C0.917969 13.0415 1.92764 15.4791 3.72486 17.2763C4.61476 18.1662 5.67122 18.8721 6.83392 19.3537C7.99662 19.8353 9.2428 20.0832 10.5013 20.0832C13.043 20.0832 15.4805 19.0735 17.2777 17.2763C19.075 15.4791 20.0846 13.0415 20.0846 10.4998C20.0846 9.24134 19.8368 7.99516 19.3551 6.83245C18.8735 5.66975 18.1676 4.61329 17.2777 3.7234C16.3878 2.8335 15.3314 2.1276 14.1687 1.64599C13.006 1.16438 11.7598 0.916504 10.5013 0.916504Z" fill="#c0c0c0"/></svg>';
        }

        const buttonElement = createSocialMediaButton(platform, link, svgCode);
        socialMediaContainer.appendChild(buttonElement);
      }
    }

// Update the risk assessment section
const freezeAuth = data.security.freezeAble === null;
const mintAuth = !data.security.mintable;
const lpBurned = data.lpBurn > 50;
const top10HolderPercent = data.security.top10HolderPercent * 100;

// Function to calculate the risk percentage
function calculateRiskPercentage(freezeAuth, mintAuth, lpBurned, top10HolderPercent) {
  let riskPercentage = 0;

  if (!freezeAuth) {
    riskPercentage += 20; // Freeze Auth Enabled (risky)
  }

  if (!mintAuth) {
    riskPercentage += 20; // Mint Auth Enabled (risky)
  }

  if (!lpBurned) {
    riskPercentage += 20; // LP Not Burned (risky)
  }

  if (top10HolderPercent > 25) {
    riskPercentage += 20; // Top 10 Holders > 10% (risky)
  }

  // Placeholder logic for hidden dev wallets (consider it risky)
  riskPercentage += 10;

  // Placeholder logic for rugpull check (consider it not risky)
  // riskPercentage += 0;

  return riskPercentage;
}

const riskPercentage = calculateRiskPercentage(freezeAuth, mintAuth, lpBurned, top10HolderPercent);

// Function to create a checkmark or cross SVG
function createIcon(isTrue) {
  const svgCode = isTrue
    ? '<svg width="13" height="12" viewBox="0 0 13 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.6864 0C3.37271 0 0.686401 2.68631 0.686401 6C0.686401 9.31387 3.37271 12 6.6864 12C10.0003 12 12.6864 9.31387 12.6864 6C12.6864 2.68631 10.0003 0 6.6864 0ZM6.6864 11.2618C3.79159 11.2618 1.4364 8.89481 1.4364 5.99998C1.4364 3.10516 3.79159 0.749977 6.6864 0.749977C9.58121 0.749977 11.9364 3.10518 11.9364 5.99998C11.9364 8.89478 9.58121 11.2618 6.6864 11.2618ZM9.08096 3.80456L5.56064 7.347L3.97533 5.76169C3.82889 5.61525 3.59151 5.61525 3.44489 5.76169C3.29845 5.90812 3.29845 6.1455 3.44489 6.29194L5.30095 8.14819C5.44739 8.29444 5.68476 8.29444 5.83139 8.14819C5.84826 8.13131 5.86271 8.11293 5.87584 8.09381L9.61159 4.33499C9.75784 4.18855 9.75784 3.95118 9.61159 3.80456C9.46496 3.65813 9.22759 3.65813 9.08096 3.80456Z" fill="#4CDE6C"/></svg>'
    : '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13 12" fill="#AF0000" width="13px" height="12px"><path d="M8.35909 4.48038L6.8389 6L8.35909 7.51961C8.40198 7.5625 8.43599 7.6134 8.4592 7.66943C8.48241 7.72546 8.49435 7.78551 8.49435 7.84615C8.49435 7.9068 8.48241 7.96685 8.4592 8.02287C8.43599 8.0789 8.40198 8.12981 8.35909 8.17269C8.31621 8.21557 8.26531 8.24959 8.20928 8.27279C8.15325 8.296 8.0932 8.30795 8.03256 8.30795C7.97191 8.30795 7.91186 8.296 7.85583 8.27279C7.79981 8.24959 7.7489 8.21557 7.70602 8.17269L6.1864 6.6525L4.66679 8.17269C4.62391 8.21557 4.573 8.24959 4.51697 8.27279C4.46094 8.296 4.40089 8.30795 4.34025 8.30795C4.27961 8.30795 4.21956 8.296 4.16353 8.27279C4.1075 8.24959 4.05659 8.21557 4.01371 8.17269C3.97083 8.12981 3.93681 8.0789 3.91361 8.02287C3.8904 7.96685 3.87845 7.9068 3.87845 7.84615C3.87845 7.78551 3.8904 7.72546 3.91361 7.66943C3.93681 7.6134 3.97083 7.5625 4.01371 7.51961L5.5339 6L4.01371 4.48038C3.92711 4.39378 3.87845 4.27632 3.87845 4.15385C3.87845 4.03137 3.92711 3.91391 4.01371 3.82731C4.10031 3.7407 4.21777 3.69205 4.34025 3.69205C4.46273 3.69205 4.58018 3.7407 4.66679 3.82731L6.1864 5.3475L7.70602 3.82731C7.7489 3.78443 7.79981 3.75041 7.85583 3.7272C7.91186 3.70399 7.97191 3.69205 8.03256 3.69205C8.0932 3.69205 8.15325 3.70399 8.20928 3.7272C8.26531 3.75041 8.31621 3.78443 8.35909 3.82731C8.40198 3.87019 8.43599 3.9211 8.4592 3.97712C8.48241 4.03315 8.49435 4.0932 8.49435 4.15385C8.49435 4.21449 8.48241 4.27454 8.4592 4.33057C8.43599 4.38659 8.40198 4.4375 8.35909 4.48038ZM12.1864 6C12.1864 7.18669 11.8345 8.34672 11.1752 9.33342C10.5159 10.3201 9.57886 11.0891 8.4825 11.5433C7.38615 11.9974 6.17975 12.1162 5.01586 11.8847C3.85198 11.6532 2.78288 11.0818 1.94376 10.2426C1.10465 9.40352 0.533204 8.33443 0.301692 7.17054C0.0701811 6.00665 0.189001 4.80025 0.643127 3.7039C1.09725 2.60754 1.86629 1.67047 2.85298 1.01118C3.83968 0.351894 4.99972 0 6.1864 0C7.77719 0.0016799 9.30233 0.63436 10.4272 1.75921C11.552 2.88407 12.1847 4.40922 12.1864 6ZM11.2633 6C11.2633 4.99588 10.9656 4.01431 10.4077 3.17941C9.84985 2.34452 9.05694 1.69379 8.12926 1.30953C7.20157 0.925274 6.18077 0.824734 5.19594 1.02063C4.21112 1.21652 3.3065 1.70005 2.59648 2.41007C1.88646 3.12009 1.40293 4.02471 1.20703 5.00954C1.01114 5.99437 1.11168 7.01517 1.49594 7.94285C1.8802 8.87054 2.53092 9.66345 3.36582 10.2213C4.20071 10.7792 5.18228 11.0769 6.1864 11.0769C7.53242 11.0754 8.82287 10.54 9.77464 9.58824C10.7264 8.63646 11.2618 7.34601 11.2633 6Z"/></svg>';
  return svgCode;
}

document.getElementById('freezeAuth').innerHTML = createIcon(freezeAuth);
document.getElementById('mintAuth').innerHTML = createIcon(mintAuth);
document.getElementById('lpBurned').innerHTML = createIcon(lpBurned);
document.getElementById('top10Holders').innerHTML = createIcon(top10HolderPercent <= 10);

// Placeholder logic for hidden dev wallets and rugpull check
document.getElementById('hiddenDevWallets').innerHTML = createIcon(false);
document.getElementById('rugpullCheck').innerHTML = createIcon(true);

// Update the risk percentage
const riskPercentageElement = document.querySelector('.MainH2');
riskPercentageElement.textContent = `${riskPercentage}%`;

// Set the data-percentage attribute based on the risk percentage value
if (riskPercentage > 15) {
  riskPercentageElement.setAttribute('data-percentage', 'true');
} else {
  riskPercentageElement.removeAttribute('data-percentage');
}

    

    // Update the chart info section
    const marketCap = data.marketCap;
    const liquidity = data.liquidity;
    const volume = data.stats['24h'].totalVolume;
    const supply = data.decimals ? data.security.totalSupply : data.totalSupply;

    document.getElementById('marketCap').textContent = '$' + formatNumber(marketCap);
    document.getElementById('liquidity').textContent = '$' + formatNumber(liquidity);
    document.getElementById('volume').textContent = '$' + formatNumber(volume);
    document.getElementById('supply').textContent = formatNumber(supply);

  } catch (error) {
    console.error('Error fetching data:', error);
  }
}

// Extract the token address from the URL path
function getTokenAddressFromUrl() {
  const urlPath = window.location.pathname;
  const tokenAddress = urlPath.slice(1); // Remove the leading slash
  return tokenAddress;
}

// Call the fetchData function with the token address when the page loads
window.addEventListener('load', () => {
  const tokenAddress = getTokenAddressFromUrl();
  if (tokenAddress) {
    fetchData(tokenAddress);
    setInterval(() => fetchData(tokenAddress), 1000); // Refresh data every 60 seconds
  } else {
    console.error('Token address not found in the URL.');
  }
});

// API endpoint URL with a dynamic parameter
const dexScreenerApiUrl = (tokenAddress) => `https://api.dexscreener.com/latest/dex/search?q=${tokenAddress}`;

// Function to fetch the first pair address from the API
async function fetchPairAddress(tokenAddress) {
  try {
    const response = await fetch(dexScreenerApiUrl(tokenAddress));
    const data = await response.json();

    if (data.pairs.length > 0) {
      const pairAddress = data.pairs[0].pairAddress;
      return pairAddress;
    } else {
      throw new Error('No pair address found');
    }
  } catch (error) {
    console.error('Error fetching pair address:', error);
    return null;
  }
}

// Function to update the chart URL with the pair address
async function updateChartUrl(tokenAddress) {
  const pairAddress = await fetchPairAddress(tokenAddress);

  if (pairAddress) {
    const chartUrl = `https://www.dextools.io/widget-chart/en/solana/pe-light/${pairAddress}?theme=dark&chartType=Candle&chart&drawingToolbars=false&chartInUsd=true`;
    document.getElementById('dextools-chart').src = chartUrl;
  } else {
    console.error('Failed to update chart URL');
  }
}

// Extract the token address from the URL path
function getTokenAddressFromUrl() {
  const urlPath = window.location.pathname;
  const tokenAddress = urlPath.slice(1); // Remove the leading slash
  return tokenAddress;
}

// Call the updateChartUrl function with the token address when the page loads
window.addEventListener('load', () => {
  const tokenAddress = getTokenAddressFromUrl();
  if (tokenAddress) {
    updateChartUrl(tokenAddress);
  } else {
    console.error('Token address not found in the URL.');
  }
});
