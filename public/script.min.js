// API endpoint URL with a dynamic parameter
const dexScreenerApiUrl = (tokenAddress) => `https://api.dexscreener.com/latest/dex/pairs/solana/${tokenAddress}`;
const solanaFmApiUrl = (mintAddress) => `https://api.solana.fm/v1/tokens/${mintAddress}`;

// Function to fetch data from the APIs and update the HTML elements
async function fetchData(tokenAddress) {
  try {
    const dexScreenerResponse = await fetch(dexScreenerApiUrl(tokenAddress));
    const dexScreenerData = await dexScreenerResponse.json();

    const pair = dexScreenerData.pair;
    const mintAddress = pair.baseToken.address;

    // Update the token name
    document.getElementById('tokenName').textContent = pair.baseToken.name;

    // Update the token symbol
    document.getElementById('tokenSymbol').textContent = pair.baseToken.symbol;

    // Update the mint address
    document.getElementById('mintAddress').textContent = mintAddress;

    // Fetch token image from Solana.fm API
    const solanaFmResponse = await fetch(solanaFmApiUrl(mintAddress));
    const solanaFmData = await solanaFmResponse.json();

    // Update the token image
    document.getElementById('tokenImage').src = solanaFmData.tokenList.image;

    // Update the social media links
    const socialMediaLinks = {
      twitter: pair.info.socials.find(social => social.type === 'twitter')?.url,
      telegram: pair.info.socials.find(social => social.type === 'telegram')?.url
    };

    // Function to create a social media button
    function createSocialMediaButton(platform, link) {
      const buttonElement = document.createElement('a');
      buttonElement.href = link;
      buttonElement.target = '_blank';

      const buttonContent = document.createElement('button');
      buttonContent.className = platform;
      buttonContent.innerHTML = `<svg><!-- ... (SVG code for the platform icon) ... --></svg>`;

      buttonElement.appendChild(buttonContent);
      return buttonElement;
    }

    // Get the container element for social media buttons
    const socialMediaContainer = document.querySelector('.Media');

    // Clear existing social media buttons
    socialMediaContainer.innerHTML = '';

    // Create and append social media buttons based on available links
    for (const [platform, link] of Object.entries(socialMediaLinks)) {
      if (link) {
        const buttonElement = createSocialMediaButton(platform, link);
        socialMediaContainer.appendChild(buttonElement);
      }
    }
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}

// Function to update the price and price change percentage
async function updatePriceData(tokenAddress) {
  try {
    const response = await fetch(dexScreenerApiUrl(tokenAddress));
    const data = await response.json();

    const pair = data.pair;

    // Update the token price
    document.querySelector('.Price').textContent = '$' + pair.priceUsd;

    // Update the price change percentage
    const priceChangePercentage = pair.priceChange.h24.toFixed(2);
    document.querySelector('.PriceMove').textContent = priceChangePercentage + '%';
  } catch (error) {
    console.error('Error fetching price data:', error);
  }
}

// Extract the token address from the URL path
function getTokenAddressFromUrl() {
  const urlPath = window.location.pathname;
  const tokenAddress = urlPath.slice(1); // Remove the leading slash
  return tokenAddress;
}

// Call the fetchData function with the token address when the page loads
window.addEventListener('load', () => {
  const tokenAddress = getTokenAddressFromUrl();
  if (tokenAddress) {
    fetchData(tokenAddress);
    setInterval(() => updatePriceData(tokenAddress), 500);
  } else {
    console.error('Token address not found in the URL.');
  }
});