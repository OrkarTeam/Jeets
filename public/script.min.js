// API endpoint URL with a dynamic parameter
const apiUrl = (tokenAddress) => `https://api.solanatracker.io/tokens/${tokenAddress}`;

// Function to fetch data from the API and update the HTML elements
async function fetchData(tokenAddress) {
  try {
    const response = await fetch(apiUrl(tokenAddress));
    const data = await response.json();

    // Update the token name
    document.getElementById('tokenName').textContent = data.name;

    // Update the token symbol
    document.getElementById('tokenSymbol').textContent = data.symbol;

    // Update the token description
    const tokenDescription = data.description || 'No description available';
    document.getElementById('tokenDescription').textContent = tokenDescription;

    // Update the token image
    document.getElementById('tokenImage').src = data.image;

    // Update the mint address
    document.getElementById('mintAddress').textContent = data.mint;

    // Update the token price
    document.querySelector('.Price').textContent = data.price ? '$' + data.price : 'N/A';

    // Update the price change percentage (assuming 24h price change)
    const priceChangePercentage = data.stats && data.stats['24h'] && data.stats['24h'].priceChangePercent
      ? data.stats['24h'].priceChangePercent.toFixed(2) + '%'
      : 'N/A';
    document.querySelector('.PriceMove').textContent = priceChangePercentage;

    // Update the social media links
    const socialMediaLinks = {
      twitter: data.twitter || '',
      telegram: data.telegram || '',
      discord: data.discord || '',
      website: data.website || ''
    };

    // Function to create a social media button
    function createSocialMediaButton(platform, link, svgCode) {
      const buttonElement = document.createElement('a');
      buttonElement.href = link;
      buttonElement.target = '_blank';

      const buttonContent = document.createElement('button');
      buttonContent.className = platform;
      buttonContent.innerHTML = svgCode;

      buttonElement.appendChild(buttonContent);
      return buttonElement;
    }

    // Get the container element for social media buttons
    const socialMediaContainer = document.querySelector('.Media');

    // Clear existing social media buttons
    socialMediaContainer.innerHTML = '';

    // Create and append social media buttons based on available links
    for (const [platform, link] of Object.entries(socialMediaLinks)) {
      if (link) {
        let svgCode = '';

        if (platform === 'twitter') {
          svgCode = '<svg><!-- Twitter SVG code --></svg>';
        } else if (platform === 'telegram') {
          svgCode = '<svg><!-- Telegram SVG code --></svg>';
        } else if (platform === 'discord') {
          svgCode = '<svg><!-- Discord SVG code --></svg>';
        } else if (platform === 'website') {
          svgCode = '<svg><!-- Website SVG code --></svg>';
        }

        const buttonElement = createSocialMediaButton(platform, link, svgCode);
        socialMediaContainer.appendChild(buttonElement);
      }
    }
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}

// Extract the token address from the URL path
function getTokenAddressFromUrl() {
  const urlPath = window.location.pathname;
  const tokenAddress = urlPath.slice(1); // Remove the leading slash
  return tokenAddress;
}

// Call the fetchData function with the token address when the page loads
window.addEventListener('load', () => {
  const tokenAddress = getTokenAddressFromUrl();
  if (tokenAddress) {
    fetchData(tokenAddress);
    setInterval(() => fetchData(tokenAddress), 60000); // Refresh data every 60 seconds
  } else {
    console.error('Token address not found in the URL.');
  }
});